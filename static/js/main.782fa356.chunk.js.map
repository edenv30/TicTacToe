{"version":3,"sources":["components/Square.js","components/utils.js","components/Line.js","components/Board.js","components/Game.js","App.js","serviceWorker.js","index.js"],"names":["Square","className","type","value","this","props","onClick","Component","squares","winnerCond","i","length","a","b","c","Line","renderSquare","handleClick","slice","util","turn","callback","one","two","three","Board","getData","updateSquares","history","state","numSteps","setState","squares1","concat","isXturn","getConfetti","drawShape","ctx","beginPath","angle","x","Math","cos","y","sin","lineTo","stroke","closePath","jumpToStep","numStep","Array","fill","statusPlayer","confettiShow","currentSquares","winner","steps","map","step","btnValue","key","Game","handleNewGame","newGame","isNewGame","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.782fa356.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\n\r\nclass Square extends Component {\r\n    \r\n    render() {\r\n        return (\r\n            <input className=\"square\" type=\"button\" value={this.props.value} \r\n                    onClick={ () => this.props.onClick() }\r\n            />\r\n        );\r\n    }\r\n}\r\n\r\nexport default Square;","const calcWinner = (squares) => {\r\n    const winnerCond = [\r\n        [0,1,2],\r\n        [0,3,6],\r\n        [0,4,8],\r\n        [1,4,7],\r\n        [2,4,6],\r\n        [2,5,8],\r\n        [3,4,5],\r\n        [6,7,8]\r\n    ];\r\n\r\n    for(let i=0; i< winnerCond.length; i++) {\r\n        const [a,b,c] = winnerCond[i];\r\n        if(squares[a] && squares[a] === squares[b] && squares[b] === squares[c]) {\r\n            return squares[a]; // the winner X or O\r\n        }\r\n    }\r\n\r\n    return null; // no winner\r\n}\r\n\r\nconst tieCondition = (squares) => {\r\n    console.log(squares)\r\n    squares.forEach ( (square)  => {\r\n        if(square === false){\r\n            console.log('sqqqquare',square)\r\n            return false;\r\n            \r\n        }\r\n            \r\n    })\r\n    return true;\r\n}\r\n\r\n\r\nexport default {calcWinner, tieCondition};","import React, { Component } from 'react';\r\nimport Square from './Square';\r\nimport util from './utils';\r\n\r\nclass Line extends Component {\r\n\r\n    renderSquare = (i) => {\r\n        return (\r\n            <Square \r\n                value={this.props.squares[i]}\r\n                onClick={ () => this.handleClick(i) }\r\n            />\r\n        );\r\n    }\r\n\r\n    handleClick = (i) => {\r\n        const squares = this.props.squares.slice();\r\n        if(util.calcWinner(squares) || squares[i]) {\r\n            return;\r\n        }\r\n        squares[i] = this.props.turn ? 'X' : 'O' ;\r\n        this.props.callback(squares, !this.props.turn);\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <div className=\"board-row\">\r\n                    {this.renderSquare(this.props.one)}\r\n                    {this.renderSquare(this.props.two)}\r\n                    {this.renderSquare(this.props.three)}\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Line;","import React, { Component } from 'react';\r\nimport Line from './Line';\r\nimport util from './utils';\r\n\r\nimport Confetti from 'react-confetti'\r\n\r\nclass Board extends Component {\r\n\r\n    constructor(props) {\r\n        super(props)\r\n        this.state = {\r\n            numSteps: 0,\r\n            history: [ {squares: Array(9).fill(null)} ],\r\n            squares1: Array(9).fill(null),\r\n            isXturn: true\r\n        }\r\n    }\r\n\r\n    getData = (updateSquares, turn) => {\r\n        const history = this.state.history.slice(0, this.state.numSteps + 1);\r\n        const currentSquares = history[history.length - 1];\r\n        let squares = currentSquares.squares.slice();\r\n        squares = updateSquares;\r\n        this.setState({squares1: updateSquares,\r\n                    history: history.concat({\r\n                            squares: squares\r\n                    }),\r\n                    numSteps: history.length,\r\n                    isXturn: turn ,\r\n                    \r\n        })\r\n    }\r\n\r\n    getConfetti = () => {\r\n        const confetti = <Confetti\r\n                    drawShape={ctx => {\r\n                        ctx.beginPath()\r\n                        for(let i = 0; i < 22; i++) {\r\n                        const angle = 0.35 * i\r\n                        const x = (0.2 + (1.5 * angle)) * Math.cos(angle)\r\n                        const y = (0.2 + (1.5 * angle)) * Math.sin(angle)\r\n                        ctx.lineTo(x, y)\r\n                        }\r\n                        ctx.stroke()\r\n                        ctx.closePath()\r\n                    }}\r\n                    \r\n            />\r\n        return confetti;\r\n    }\r\n\r\n    jumpToStep = (numStep) => {\r\n        this.setState({\r\n            numSteps: numStep,\r\n            isXturn: (numStep%2) === 0\r\n        })\r\n    }\r\n\r\n    render() {\r\n        const history = this.state.history;\r\n        const currentSquares = history[this.state.numSteps];\r\n        const winner = util.calcWinner(currentSquares.squares);\r\n        let statusPlayer;\r\n        let confettiShow;\r\n        if(winner) {\r\n            statusPlayer = `The Winner is  player ${winner}`;\r\n            confettiShow = this.getConfetti();\r\n        }\r\n        else {\r\n            statusPlayer = `Turn of Player ${this.state.isXturn ? 'X' : 'O'}`;\r\n        }\r\n\r\n        let steps = history.map (  (step, numStep) => {\r\n            const btnValue = numStep ? `Back to step ${numStep}` : 'Start Over';\r\n            return(\r\n                <li key={numStep}>\r\n                    <input type=\"button\" value={btnValue} onClick={ () => this.jumpToStep(numStep) } />\r\n                </li>\r\n            )\r\n        } )\r\n\r\n        return (\r\n            <div className=\"game-wrap\">\r\n                <div className=\"status\">{statusPlayer}</div>\r\n                {confettiShow}\r\n                <div className=\"game-board\">\r\n                    <Line one={0} two={1} three={2} squares={currentSquares.squares} turn={this.state.isXturn} callback={ (updateSquares, turn) => this.getData(updateSquares, turn)} /> \r\n                    <Line one={3} two={4} three={5} squares={currentSquares.squares} turn={this.state.isXturn} callback={ (updateSquares, turn) => this.getData(updateSquares, turn)} /> \r\n                    <Line one={6} two={7} three={8} squares={currentSquares.squares} turn={this.state.isXturn} callback={ (updateSquares, turn) => this.getData(updateSquares, turn)} /> \r\n                </div>\r\n                <div className=\"game-info\">\r\n                    <ul>{steps}</ul>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Board;","import React, { Component } from 'react';\r\nimport Board from './Board';\r\n\r\nclass Game extends Component {\r\n\r\n    constructor() {\r\n        super()\r\n        this.state = {\r\n            newGame: false\r\n        }\r\n    }\r\n\r\n    handleNewGame = () => {\r\n        this.setState({newGame: !this.state.newGame})\r\n        \r\n    }\r\n\r\n    render() {\r\n        \r\n        return (\r\n            <div>\r\n                <Board className=\"game\" isNewGame={this.state.newGame} />\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Game;","import React from 'react';\n\nimport './App.css';\nimport Game from './components/Game';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <h1>Tic-Tac-Toe Game</h1>\n      <Game />\n      \n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}